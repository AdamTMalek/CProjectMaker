#!/usr/bin/python3

import argparse
import os
import re
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')))

# Adding noqa at the end of the following lines will silence PEP8 E402 "module level import not at top of file"
# It has to stay like this because we have to append the project path first, otherwise the script will not work
# and an ImportError will occur every time the script is executed.
from scripts.module import Module  # noqa
from scripts.project import Project  # noqa
from scripts.verbose import Verbose, MessageType  # noqa

verbose = None


def main(args_list=None):
    global verbose
    arg_parser = setup_arg_parser()
    if args_list:
        args = arg_parser.parse_args(args_list)
    else:
        args = arg_parser.parse_args()

    if hasattr(args, 'verbose'):
        level = args.verbose if args.verbose is not None else 0
        verbose = Verbose(level)

    # Before executing any sub-parser handlers (like project_args_handler)
    # the name and rename (if used) are validated.
    # If any of these names are invalid, the program will terminate
    if hasattr(args, 'rename') and args.rename is not None and not valid_name(args.rename):
        print_invalid_name_error(args.rename)
        return

    # If the user has not used any option (executed cpm without any arguments)
    # print the help message and terminate
    if not hasattr(args, 'name'):
        arg_parser.print_help()
        return

    if hasattr(args, 'name') and not valid_name(args.name):
        print_invalid_name_error(args.name)
        return

    # args.function will call the right args handler depending on the specified argument
    # For example, if the user executes the program like:
    # cpm project foo
    # Then the arg parser will call project_args_handler to handle the arguments
    args.function(args, verbose)


def print_invalid_name_error(name):
    """
    Print an invalid name error
    :param name: Invalid name
    """
    Verbose.print_any_level(MessageType.ERROR,
                            "The name {} is not valid. Only alphanumerical characters are accepted.".format(name))


def setup_arg_parser():
    """
    Set up the parser and all arguments supported by the program
    :return: ArgumentParser with supported arguments
    """
    arg_parser = argparse.ArgumentParser()
    subparsers = arg_parser.add_subparsers(help="available options")
    Project.add_subparser(subparsers)
    Module.add_subparser(subparsers)
    return arg_parser


def valid_name(name):
    return not re.search(r"[^a-zA-Z0-9]+", name)


if __name__ == "__main__":
    main()
